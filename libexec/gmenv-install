#!/usr/bin/env bash

set -uo pipefail;

####################################
# Ensure we can execute standalone #
####################################

function early_death() {
  echo "[FATAL] ${0}: ${1}" >&2;
  exit 1;
};

if [ -z "${GMENV_ROOT:-""}" ]; then
  # http://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac
  readlink_f() {
    local target_file="${1}";
    local file_name;

    while [ "${target_file}" != "" ]; do
      cd "$(dirname ${target_file})" || early_death "Failed to 'cd \$(dirname ${target_file})' while trying to determine GMENV_ROOT";
      file_name="$(basename "${target_file}")" || early_death "Failed to 'basename \"${target_file}\"' while trying to determine GMENV_ROOT";
      target_file="$(readlink "${file_name}")";
    done;

    echo "$(pwd -P)/${file_name}";
  };

  GMENV_ROOT="$(cd "$(dirname "$(readlink_f "${0}")")/.." && pwd)";
  [ -n ${GMENV_ROOT} ] || early_death "Failed to 'cd \"\$(dirname \"\$(readlink_f \"${0}\")\")/..\" && pwd' while trying to determine GMENV_ROOT";
else
  GMENV_ROOT="${GMENV_ROOT%/}";
fi;
export GMENV_ROOT;

if [ -n "${GMENV_HELPERS:-""}" ]; then
  log 'debug' 'GMENV_HELPERS is set, not sourcing helpers again';
else
  [ "${GMENV_DEBUG:-0}" -gt 0 ] && echo "[DEBUG] Sourcing helpers from ${GMENV_ROOT}/lib/helpers.sh";
  if source "${GMENV_ROOT}/lib/helpers.sh"; then
    log 'debug' 'Helpers sourced successfully';
  else
    early_death "Failed to source helpers from ${GMENV_ROOT}/lib/helpers.sh";
  fi;
fi;

# Ensure libexec and bin are in $PATH
for dir in libexec bin; do
  case ":${PATH}:" in
    *:${GMENV_ROOT}/${dir}:*) log 'debug' "\$PATH already contains '${GMENV_ROOT}/${dir}', not adding it again";;
    *) 
      log 'debug' "\$PATH does not contain '${GMENV_ROOT}/${dir}', prepending and exporting it now";
      export PATH="${GMENV_ROOT}/${dir}:${PATH}";
      ;;
  esac;
done;

#####################
# Begin Script Body #
#####################

[ "${#}" -gt 1 ] && log 'error' 'usage: gmenv install [<version>]';

declare requested="${1:-""}";
declare GMENV_REPO="${GMENV_REPO:-release}";

log debug "Resolving version with: gmenv-resolve-version ${requested}";
declare resolved="$(gmenv-resolve-version ${requested})";

declare version="${resolved%%\:*}";
declare regex="${resolved##*\:}";

[ -n "${version}" ] || log 'error' 'Version is not specified. This should not be possible as we default to latest';

log 'debug' "Processing install for version ${version}, using regex ${regex}";

version="$(gmenv-list-remote | grep -e "${regex}" | head -n 1)";
[ -n "${version}" ] || log 'error' "No versions matching '${requested}' found in remote";

dst_path="${GMENV_ROOT}/versions/${version}";
if [ -f "${dst_path}/greymatter" ]; then
  echo "Grey Matter v${version} is already installed";
  exit 0;
fi;

declare v="v"
if [[ "${regex}" == "^latest$" ]]; then
  v=""
fi

GMENV_REMOTE="${GMENV_REMOTE:-https://nexus.greymatter.io}";
version_url="${GMENV_REMOTE}/repository/raw/${GMENV_REPO}/gm-cli/greymatter-${v}${version}.tar.gz";


log 'info' "Installing Grey Matter v${version}";

# Create a local temporary directory for downloads
download_tmp="$(mktemp gmenv_download.XXXXXX)" || log 'error' "Unable to create temporary download file in $(pwd)";
untar_tmp="$(mktemp -d gmenv_untar.XXXXXX)" || log 'error' "Unable to create temporary download file in $(pwd)";

declare curl_progress="";
case "${GMENV_CURL_OUTPUT:-2}" in
  '2')
    log 'debug' 'Setting curl progress bar with "-#"';
    curl_progress="-#";
    ;;
  '1')
    log 'debug' 'Using default curl output';
    curl_progress="";
    ;;
  '0')
    log 'debug' 'Running curl silently with "-s"';
    curl_progress="-s";
    ;;
  *)
    log 'error' 'GMENV_CURL_OUTPUT specified, but not with a support value ([0,1,2])';
    ;;
esac;

declare GMENV_LDAP_USERNAME="${GMENV_LDAP_USERNAME:-""}"
declare GMENV_LDAP_PASSWORD="${GMENV_LDAP_PASSWORD:-""}"

if [ -z "${GMENV_LDAP_USERNAME:-""}" ] || [ -z "${GMENV_LDAP_PASSWORD:-""}" ]; then
  log 'debug' 'Credentials not passed in as environment variables'

  gmenv-credentials-file || log 'error' "gmenv-credentials-file failed"

  declare credentials="$(cat ${GMENV_CREDENTIALS_FILE})"
else
  declare credentials=${GMENV_LDAP_USERNAME}:${GMENV_LDAP_PASSWORD}
fi

log 'info' "Downloading release tarball from ${version_url}";

curlw -u ${credentials} ${curl_progress} -f -o "${download_tmp}" "${version_url}" || log 'error' 'Tarball download failed';
# log 'info' "Downloading SHA hash file from ${version_url}/${shasums_name}";
# curlw -s -f -o "${download_tmp}/${shasums_name}" "${version_url}/${shasums_name}" || log 'error' 'SHA256 hashes download failed';

mkdir -p "${dst_path}" || log 'error' "Failed to make directory ${dst_path}";

declare unzip_output="$(tar -xf "${download_tmp}" -C "${untar_tmp}" || log 'error' 'Tarball unzip failed')";
while IFS= read -r unzip_line; do
 log 'info' "${unzip_line}";
done < <(printf '%s\n' "${unzip_output}");

# The Grey Matter CLI tar packages the Linux, OSX and Windows binaries in a single tar. We need to put the correct one into place
case "$(uname -s)" in
  Darwin*)
    os="osx";
    mv "${untar_tmp}/greymatter.${os}" "${dst_path}/greymatter"
    chmod a+x "${dst_path}/greymatter"
    ;;
  MINGW64*)
    os="exe";
    mv "${untar_tmp}/greymatter.${os}" "${dst_path}/greymatter"
    ;;
  MSYS_NT*)
    os="exe";
    mv "${untar_tmp}/greymatter.${os}" "${dst_path}/greymatter"
    ;;
  CYGWIN_NT*)
    os="exe";
    mv "${untar_tmp}/greymatter.${os}" "${dst_path}/greymatter"
    ;;
  *)
    os="linux";
    mv "${untar_tmp}/greymatter.${os}" "${dst_path}/greymatter"
    chmod a+x "${dst_path}/greymatter"
    ;;
esac;

log 'info' "Installation of greymatter ${v}${version} successful. To make this your default version, run 'gmenv use ${version}'";

# Clean up temp artifacts
rm -rf "${download_tmp}"
trap "rm -rf ${untar_tmp}" EXIT;