#!/usr/bin/env bash
set -uo pipefail;

####################################
# Ensure we can execute standalone #
####################################

function early_death() {
  echo "[FATAL] ${0}: ${1}" >&2;
  exit 1;
};

if [ -z "${GMENV_ROOT:-""}" ]; then
  # http://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac
  readlink_f() {
    local target_file="${1}";
    local file_name;

    while [ "${target_file}" != "" ]; do
      cd "$(dirname ${target_file})" || early_death "Failed to 'cd \$(dirname ${target_file})' while trying to determine GMENV_ROOT";
      file_name="$(basename "${target_file}")" || early_death "Failed to 'basename \"${target_file}\"' while trying to determine GMENV_ROOT";
      target_file="$(readlink "${file_name}")";
    done;

    echo "$(pwd -P)/${file_name}";
  };

  GMENV_ROOT="$(cd "$(dirname "$(readlink_f "${0}")")/.." && pwd)";
  [ -n ${GMENV_ROOT} ] || early_death "Failed to 'cd \"\$(dirname \"\$(readlink_f \"${0}\")\")/..\" && pwd' while trying to determine GMENV_ROOT";
else
  GMENV_ROOT="${GMENV_ROOT%/}";
fi;
export GMENV_ROOT;

if [ -n "${GMENV_HELPERS:-""}" ]; then
  log 'debug' 'GMENV_HELPERS is set, not sourcing helpers again';
else
  [ "${GMENV_DEBUG:-0}" -gt 0 ] && echo "[DEBUG] Sourcing helpers from ${GMENV_ROOT}/lib/helpers.sh";
  if source "${GMENV_ROOT}/lib/helpers.sh"; then
    log 'debug' 'Helpers sourced successfully';
  else
    early_death "Failed to source helpers from ${GMENV_ROOT}/lib/helpers.sh";
  fi;
fi;

# Ensure libexec and bin are in $PATH
for dir in libexec bin; do
  case ":${PATH}:" in
    *:${GMENV_ROOT}/${dir}:*) log 'debug' "\$PATH already contains '${GMENV_ROOT}/${dir}', not adding it again";;
    *) 
      log 'debug' "\$PATH does not contain '${GMENV_ROOT}/${dir}', prepending and exporting it now";
      export PATH="${GMENV_ROOT}/${dir}:${PATH}";
      ;;
  esac;
done;

#####################
# Begin Script Body #
#####################

[ "${#}" -gt 0 ] && log 'error' 'usage: gmenv credentials';

test_credentials() {
  GMENV_CREDENTIALS_TEST_URL="${GMENV_CREDENTIALS_TEST_URL:-https://nexus.greymatter.io/service/rest/v1/repositories}"
  local response_code=$(curl -s -o /dev/null -w "%{http_code}" -u "${1}":"${2}" "${GMENV_CREDENTIALS_TEST_URL}")
  log 'debug' "response code from test credentials: ${response_code}"
  echo "${response_code}"
}


if [ ! -e "${GMENV_CREDENTIALS_FILE}" ]; then
  log 'warn' 'No credentials for Grey Matter found. Prompting for user credentials.' >&2;
   
  log 'info' "gmenv needs your Decipher LDAP credentials to retrieve Grey Matter from Nexus."  >&2;
  log 'info' "Your information will be temporarily stored in ${GMENV_CREDENTIALS_FILE}" >&2;

  read -p "Enter your Decipher LDAP username: " LDAP_USERNAME
  read -sp "Enter your Decipher LDAP password: " LDAP_PASSWORD
  
  declare response_code="$(test_credentials ${LDAP_USERNAME} ${LDAP_PASSWORD})"
  if [ "${response_code:-0}" -ne "200" ]; then
    log 'error' "Decipher LDAP credentials are invalid" \
    && exit 1;
  fi
  
  [[ ! -d "${HOME}/.gmenv" ]] && mkdir "${HOME}/.gmenv"

  echo "${LDAP_USERNAME}:${LDAP_PASSWORD}" > "${GMENV_CREDENTIALS_FILE}"

  unset LDAP_PASSWORD
fi

exit 0
